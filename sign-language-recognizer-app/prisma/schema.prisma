generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  NEW
  DELETED
  LOCKED
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  session   Session?
  posts     Post[]   @relation("UserPosts")
  replies   Reply[]  @relation("UserReplies")
}


model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String   
  posts       Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  status    Status   @default(NEW)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id], name: "UserPosts")
  categoryId  Int

  replies Reply[] @relation("PostReplies")
  category  Category? @relation(fields: [categoryId], references: [id])
}

model Reply {
  id            Int      @id @default(autoincrement())
  content       String
  status        Status   @default(NEW)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  authorId      Int
  postId        Int
  parentReplyId Int? // optional field for nested replies

  author       User    @relation(fields: [authorId], references: [id], name: "UserReplies")
  post         Post    @relation(fields: [postId], references: [id], name: "PostReplies")
  parentReply  Reply?  @relation("ReplyToReply", fields: [parentReplyId], references: [id])
  childReplies Reply[] @relation("ReplyToReply")
}

model Session {
  id        String   @id @default(uuid())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
